<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>LTI-Lib: lti::orientedHLTransform Class Reference</TITLE>
<META http-equiv=Content-Type content=text/html;charset=iso-8859-1><LINK 
href="LTI-Lib ltiorientedHLTransform Class Reference-Dateien/ltiCSS.css" 
type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2800.1491" name=GENERATOR></HEAD>
<BODY>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width=90><A 
      href="file:///D:/Programme/ltilib/doc/homepage/index.html"><IMG height=100 
      alt=LTI-Lib 
      src="LTI-Lib ltiorientedHLTransform Class Reference-Dateien/ltilib.png" 
      width=250 border=0 nowrap></A> </TD>
    <TD class=headerback><!-- Begin latest release info --><FONT 
      face="Verdana, Arial, Helvetica" color=#ffffff size=-1>latest version v1.9 
      - last update 12 Nov 2004 </FONT><!-- End latest release info --></TD>
    <TD class=headerback><IMG height=1 alt="" src="" width=51 border=0> 
  </TD></TR></TBODY></TABLE><!-- Generated by Doxygen 1.3.9.1 -->
<DIV class=qindex><A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/index.html">Main&nbsp;Page</A> | <A 
class=qindex 
href="file:///D:/Programme/ltilib/doc/html/modules.html">Modules</A> | <A 
class=qindex 
href="file:///D:/Programme/ltilib/doc/html/namespaces.html">Namespace List</A> | 
<A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/hierarchy.html">Class&nbsp;Hierarchy</A> 
| <A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/classes.html">Alphabetical&nbsp;List</A> 
| <A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/annotated.html">Class&nbsp;List</A> | 
<A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/files.html">File&nbsp;List</A> | <A 
class=qindex 
href="file:///D:/Programme/ltilib/doc/html/namespacemembers.html">Namespace&nbsp;Members</A> 
| <A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/functions.html">Class&nbsp;Members</A> 
| <A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/globals.html">File&nbsp;Members</A> | 
<A class=qindex 
href="file:///D:/Programme/ltilib/doc/html/pages.html">Related&nbsp;Pages</A></DIV>
<H1>lti::orientedHLTransform Class Reference</H1>This functor is used to make a 
fast Hough Line Transform and creates a <A class=el 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
transformation accumulator. <A 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#_details">More...</A> 

<P><CODE>#include &lt;<A class=el 
href="file:///D:/Programme/ltilib/doc/html/ltiOrientedHLTransform_8h-source.html">ltiOrientedHLTransform.h</A>&gt;</CODE> 

<P>
<P>Inheritance diagram for lti::orientedHLTransform: 
<P>
<CENTER><IMG alt="" 
src="LTI-Lib ltiorientedHLTransform Class Reference-Dateien/classlti_1_1orientedHLTransform.png" 
useMap=#lti::orientedHLTransform_map border=0></CENTER><MAP 
name=lti::orientedHLTransform_map><AREA shape=RECT alt=lti::transform 
  coords=0,168,146,192 
  href="file:///D:/Programme/ltilib/doc/html/classlti_1_1transform.html"><AREA 
  shape=RECT alt=lti::functor coords=0,112,146,136 
  href="file:///D:/Programme/ltilib/doc/html/classlti_1_1functor.html"><AREA 
  shape=RECT alt=lti::ioObject coords=0,56,146,80 
  href="file:///D:/Programme/ltilib/doc/html/classlti_1_1ioObject.html"><AREA 
  shape=RECT alt=lti::object coords=0,0,146,24 
  href="file:///D:/Programme/ltilib/doc/html/classlti_1_1object.html"></MAP><A 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform-members.html">List 
of all members.</A>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD></TD></TR>
  <TR>
    <TD colSpan=2><BR>
      <H2>Help methods</H2></TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#z183_0">getHoughSpacePoints</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
      &amp;hough, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1vector.html">vector</A>&lt; 
      <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">tpoint</A>&lt; 
      float &gt; &gt; &amp;positions, const float stdDevFactor=1.0f, const float 
      hystheresis=0.5f) const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#z183_1">getSegmentPoints</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
      &amp;imageSize, const float radius, const float angle, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
      &amp;a, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
      &amp;b, const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
      &amp;origin=<A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A>(-1,-1)) 
      const </TD></TR>
  <TR>
    <TD colSpan=2><BR>
      <H2>Public Member Functions</H2></TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a0">orientedHLTransform</A> 
      ()</TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a1">orientedHLTransform</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
      &amp;other)</TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>virtual&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a2">~orientedHLTransform</A> 
      ()</TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>virtual const char 
    *&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a3">getTypeName</A> 
      () const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a4">apply</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
      &amp;src, const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
      &amp;angle_src, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
      &amp;dest) const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a5">apply</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel8.html">channel8</A> 
      &amp;src, const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
      &amp;angle_src, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
      &amp;dest) const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a6">apply</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1image.html">image</A> 
      &amp;src, const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
      &amp;angle_src, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
      &amp;dest) const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a7">apply</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
      &amp;src, const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
      &amp;angle_src, <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
      &amp;dest) const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
      &amp;&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a8">copy</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
      &amp;other)</TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
      &amp;&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a9">operator=</A> 
      (const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
      &amp;other)</TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>virtual <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1functor.html">functor</A> 
      *&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a10">clone</A> 
      () const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>const <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform_1_1parameters.html">parameters</A> 
      &amp;&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a11">getParameters</A> 
      () const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>virtual bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a12">updateParameters</A> 
      ()</TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>int&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a13">getAccuracy</A> 
      () const </TD></TR>
  <TR>
    <TD class=memItemLeft vAlign=top noWrap align=right>bool&nbsp;</TD>
    <TD class=memItemRight vAlign=bottom><A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a14">setAccuracy</A> 
      (int iAccuracy)</TD></TR></TBODY></TABLE>
<HR>
<A name=_details></A>
<H2>Detailed Description</H2>This functor is used to make a fast Hough Line 
Transform and creates a <A class=el 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
transformation accumulator. 
<P>The houghLineTransform::parameters specify what part of a given image/channel 
is transformed and which point values are considered.
<P>To accelerate the computations, an orientation map containing the angles 
perpendicular to the edges is used. This can be generated using for example <A 
class=el 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientationMap.html">lti::orientationMap</A>.
<P>Two additional methods help in the use of the hough space. The first one 
detects the local maxima ( <A class=el 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#z183_0">getHoughSpacePoints()</A> 
), and the second one finds two points that define the line segment found in the 
image ( <A class=el 
href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#z183_1">getSegmentPoints()</A> 
).
<P>The hough space contains as expected two parameters: radius and angle. They 
are measured from the middle point of the analysed region. The angle is always 
between 0 and 180 degrees. The radius can be negative and its absolute value 
will be between 0 and the image diagonal divided by two.
<P>Example: </P>
<DIV class=fragment><PRE class=fragment><SPAN class=preprocessor> #include "ltiOrientedHLTransform.h"</SPAN> <SPAN class=comment>// the hough transform</SPAN>
<SPAN class=preprocessor> #include "ltiCannyEdges.h"</SPAN>          <SPAN class=comment>// the edge detector</SPAN>
<SPAN class=preprocessor> #include "<A class=code href="file:///D:/Programme/ltilib/doc/html/ltiALLFunctor_8h.html">ltiALLFunctor.h</A>"</SPAN>          <SPAN class=comment>// to read png, jpg and bmp images</SPAN>
<SPAN class=preprocessor> #include "ltiDraw.h"</SPAN>                <SPAN class=comment>// drawing tool</SPAN>
<SPAN class=preprocessor> #include "ltiViewer.h"</SPAN>              <SPAN class=comment>// visualization tool</SPAN>

 <SPAN class=comment>// ...</SPAN>

 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1image.html">lti::image</A> inputImg;
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel8.html">lti::channel8</A> edges;
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">lti::channel</A> angles; <SPAN class=comment>// orientation map</SPAN>
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">lti::channel32</A> transformAccu;
  
 <SPAN class=comment>// load an image and extract the intensity channel from it</SPAN>
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1loadImage.html">lti::loadImage</A> imgLoader;
 imgLoader.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1loadImage.html#a6">load</A>(<SPAN class=stringliteral>"../img/hough1.png"</SPAN>,inputImg); <SPAN class=comment>// load an image</SPAN>

 <SPAN class=comment>// we need the edges</SPAN>
 cannyEdges canny;
 canny.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1cannyEdges.html#a5">apply</A>(inputImg,edges,angles);

 <SPAN class=comment>// create default HLT (Hough Line Transform) using default parameters</SPAN>
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">lti::orientedHLTransform</A> HLT;
 
 <SPAN class=comment>// The Hough Transform</SPAN>
 HLT.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a4">apply</A>(edges,angles,transformAccu);

 <SPAN class=comment>// Display the Hough space</SPAN>
 viewer viewHS(<SPAN class=stringliteral>"Hough Space"</SPAN>);
 viewHS.show(transformAccu);
  
 <SPAN class=comment>// Now get the local maxima of the transformAccu</SPAN>
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1vector.html">lti::vector&lt; tpoint&lt;float&gt;</A> &gt; maxpos;
 HLT.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#z183_0">getHoughSpacePoints</A>(transformAccu,maxpos);
 
 <SPAN class=comment>// And draw the found lines in the original image</SPAN>
 <A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1draw.html">lti::draw&lt;rgbPixel&gt;</A> drawer;
 drawer.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1draw.html#z103_0">use</A>(inputImg);
 drawer.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1draw.html#z105_0">setColor</A>(lti::White);
 <A class=code href="file:///D:/Programme/ltilib/doc/html/namespacelti.html#a26">point</A> a,b;
 <SPAN class=keywordflow>for</SPAN> (<SPAN class=keywordtype>int</SPAN> k=0;k&lt;maxpos.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1genericVector.html#a18">size</A>();++k) {
   HLT.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#z183_1">getSegmentPoints</A>(inputImg.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1genericMatrix.html#a26">size</A>(),maxpos.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1genericVector.html#a35">at</A>(k).x,maxpos.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1genericVector.html#a35">at</A>(k).y,a,b);
   drawer.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1draw.html#z109_3">line</A>(a,b);
 }
 
 <SPAN class=comment>// at last, show the resulting lines</SPAN>
 viewer view(<SPAN class=stringliteral>"Detected lines"</SPAN>);
 view.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1viewer.html#a5">show</A>(inputImg);

 view.<A class=code href="file:///D:/Programme/ltilib/doc/html/classlti_1_1viewer.html#a20">waitButtonPressed</A>(); <SPAN class=comment>// wait until the user presses the mouse button</SPAN>
                           <SPAN class=comment>// on the viewer window.</SPAN>
</PRE></DIV>
<P>
<HR>

<H2>Constructor &amp; Destructor Documentation</H2><A class=anchor name=a0 
doxytag="lti::orientedHLTransform::orientedHLTransform"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top 
            noWrap>lti::orientedHLTransform::orientedHLTransform </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>default constructor, member variable m_iAccuracy is set to 180 
      <P>
      <DL compact>
        <DT><B>See also:</B>
        <DD>m_iAccuracy() 
        <P><A class=el 
        href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a14">setAccuracy()</A> 

        <P><A class=el 
        href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html#a13">getAccuracy()</A> 
        </P></DD></DL></TD></TR></TBODY></TABLE><A class=anchor name=a1 
doxytag="lti::orientedHLTransform::orientedHLTransform"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top 
            noWrap>lti::orientedHLTransform::orientedHLTransform </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap><EM>other</EM> </TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>copy constructor 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>other</EM>&nbsp;</TD>
            <TD>the object to be copied 
  </TD></TR></TBODY></TABLE></DD></DL></TD></TR></TBODY></TABLE><A class=anchor 
name=a2 doxytag="lti::orientedHLTransform::~orientedHLTransform"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>virtual lti::orientedHLTransform::~<A 
            class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
          </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md 
  noWrap><CODE>[virtual]</CODE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>destructor 
      <P></P></TD></TR></TBODY></TABLE>
<HR>

<H2>Member Function Documentation</H2><A class=anchor name=a7 
doxytag="lti::orientedHLTransform::apply"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool lti::orientedHLTransform::apply 
          </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>angle_src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>dest</EM></TD></TR>
        <TR>
          <TD class=md></TD>
          <TD class=md>)&nbsp;</TD>
          <TD class=md colSpan=2>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>operates on a copy of the given parameters. 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>src</EM>&nbsp;</TD>
            <TD><A class=el 
              href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
              with the source data. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>angle_src</EM>&nbsp;</TD>
            <TD>channel with gradient angles. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>dest</EM>&nbsp;</TD>
            <TD><A class=el 
              href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
              where the result will be left. </TD></TR></TBODY></TABLE></DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>true if apply successful or false otherwise. 
</DD></DL></TD></TR></TBODY></TABLE><A class=anchor name=a6 
doxytag="lti::orientedHLTransform::apply"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool lti::orientedHLTransform::apply 
          </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1image.html">image</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>angle_src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>dest</EM></TD></TR>
        <TR>
          <TD class=md></TD>
          <TD class=md>)&nbsp;</TD>
          <TD class=md colSpan=2>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>Make Hough Transform of the given image and write the transformation 
      accumulator into dest. 
      <P>operates on a copy of the given parameters. 
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>src</EM>&nbsp;</TD>
            <TD>image with the source data. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>angle_src</EM>&nbsp;</TD>
            <TD>channel with gradient angles. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>dest</EM>&nbsp;</TD>
            <TD><A class=el 
              href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
              where the result will be left. </TD></TR></TBODY></TABLE></DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>true if apply successful or false otherwise. 
</DD></DL></TD></TR></TBODY></TABLE><A class=anchor name=a5 
doxytag="lti::orientedHLTransform::apply"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool lti::orientedHLTransform::apply 
          </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel8.html">channel8</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>angle_src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>dest</EM></TD></TR>
        <TR>
          <TD class=md></TD>
          <TD class=md>)&nbsp;</TD>
          <TD class=md colSpan=2>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>operates on a copy of the given parameters. 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>src</EM>&nbsp;</TD>
            <TD><A class=el 
              href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel8.html">channel8</A> 
              with the source data. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>angle_src</EM>&nbsp;</TD>
            <TD>channel with gradient angles. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>dest</EM>&nbsp;</TD>
            <TD><A class=el 
              href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
              where the result will be left. </TD></TR></TBODY></TABLE></DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>true if apply successful or false otherwise. 
</DD></DL></TD></TR></TBODY></TABLE><A class=anchor name=a4 
doxytag="lti::orientedHLTransform::apply"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool lti::orientedHLTransform::apply 
          </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel.html">channel</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>angle_src</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>dest</EM></TD></TR>
        <TR>
          <TD class=md></TD>
          <TD class=md>)&nbsp;</TD>
          <TD class=md colSpan=2>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>operates on a copy of the given parameters. 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>src</EM>&nbsp;</TD>
            <TD>channel with the source data (gradient). </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>angle_src</EM>&nbsp;</TD>
            <TD>channel with gradient angles. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>dest</EM>&nbsp;</TD>
            <TD><A class=el 
              href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
              where the result will be left. </TD></TR></TBODY></TABLE></DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>true if apply successful or false otherwise. 
</DD></DL></TD></TR></TBODY></TABLE><A class=anchor name=a10 
doxytag="lti::orientedHLTransform::clone"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>virtual <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1functor.html">functor</A>* 
            lti::orientedHLTransform::clone </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap>const<CODE> 
    [virtual]</CODE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>returns a pointer to a clone of this functor. 
      <P>
      <P>Implements <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1functor.html#a9">lti::functor</A>. 
      </P></TD></TR></TBODY></TABLE><A class=anchor name=a8 
doxytag="lti::orientedHLTransform::copy"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A>&amp; 
            lti::orientedHLTransform::copy </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap><EM>other</EM> </TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>copy data of "other" functor. 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>other</EM>&nbsp;</TD>
            <TD>the functor to be copied </TD></TR></TBODY></TABLE></DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>a reference to this functor object </DD></DL></TD></TR></TBODY></TABLE><A 
class=anchor name=a13 doxytag="lti::orientedHLTransform::getAccuracy"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>int 
            lti::orientedHLTransform::getAccuracy </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>returns accuracy of Hough Line Transform 
      <P>
      <DL compact>
        <DT><B>See also:</B>
        <DD>m_iAccuracy() </DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>value of member variable m_iAccuracy </DD></DL></TD></TR></TBODY></TABLE><A 
class=anchor name=z183_0 
doxytag="lti::orientedHLTransform::getHoughSpacePoints"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool 
            lti::orientedHLTransform::getHoughSpacePoints </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1channel32.html">channel32</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>hough</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1vector.html">vector</A>&lt; 
            <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">tpoint</A>&lt; 
            float &gt; &gt; &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>positions</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const float&nbsp;</TD>
          <TD class=mdname noWrap><EM>stdDevFactor</EM> = <CODE>1.0f</CODE>, 
          </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const float&nbsp;</TD>
          <TD class=mdname noWrap><EM>hystheresis</EM> = 
        <CODE>0.5f</CODE></TD></TR>
        <TR>
          <TD class=md></TD>
          <TD class=md>)&nbsp;</TD>
          <TD class=md colSpan=2>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>This method is used to get the list of points in the parameter space, 
      sorted by their hough transformation value, with the maxima at the 
      beginning. 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>hough</EM>&nbsp;</TD>
            <TD>a hough transformation image, as produced by the apply methods 
            </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>positions</EM>&nbsp;</TD>
            <TD>the positions of the points found in the hough image, sorted 
              by the hough value. The x value will be the radius (in pixels) and 
              the y value the angle (in radians). </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>stdDevFactor</EM>&nbsp;</TD>
            <TD>the average and std. deviation values between all detected 
              maxima will be computed. Only those values greater than the 
              average plus this parameter multiplied by the std. deviation will 
              be considered. Default value 1.0 should be ok. </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>hystheresis</EM>&nbsp;</TD>
            <TD>to detect the local maxima a region search starting from 
              preliminary maxima will be done. This value multiplied by the 
              preliminary maxima determine the threshold that must be reached in 
              order to continue the search. The value must be between 0 and 1. 
              If it is choose too low, just the biggest maxima will be found. If 
              too high, too many maxima will be found. Default value 0.5 work 
              well for the most cases. 
</TD></TR></TBODY></TABLE></DD></DL></TD></TR></TBODY></TABLE><A class=anchor 
name=a11 doxytag="lti::orientedHLTransform::getParameters"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform_1_1parameters.html">parameters</A>&amp; 
            lti::orientedHLTransform::getParameters </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>returns used parameters 
      <P>
      <P>Reimplemented from <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1transform.html#a3">lti::transform</A>. 
      </P></TD></TR></TBODY></TABLE><A class=anchor name=z183_1 
doxytag="lti::orientedHLTransform::getSegmentPoints"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool 
            lti::orientedHLTransform::getSegmentPoints </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>imageSize</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const float&nbsp;</TD>
          <TD class=mdname noWrap><EM>radius</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const float&nbsp;</TD>
          <TD class=mdname noWrap><EM>angle</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>a</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>b</EM>, </TD></TR>
        <TR>
          <TD class=md noWrap align=right></TD>
          <TD class=md></TD>
          <TD class=md noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname noWrap><EM>origin</EM> = <CODE><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1tpoint.html">point</A>(-1,-1)</CODE></TD></TR>
        <TR>
          <TD class=md></TD>
          <TD class=md>)&nbsp;</TD>
          <TD class=md colSpan=2>const</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>Given a radius and an angle, compute the two points at the border of 
      the image. 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>imageSize</EM>&nbsp;</TD>
            <TD>size of the image for which the points a and b need to be 
              computed </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>radius</EM>&nbsp;</TD>
            <TD>radius parameter of the hough space </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>angle</EM>&nbsp;</TD>
            <TD>angle parameter of the hough space </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>a</EM>&nbsp;</TD>
            <TD>begin point </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>b</EM>&nbsp;</TD>
            <TD>end point </TD></TR>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>origin</EM>&nbsp;</TD>
            <TD>optional parameter that specifies the origin of the 
              coordinates system in the image. If not given or if it contains 
              negative values, the middle of the image will be used as origin. 
            </TD></TR></TBODY></TABLE></DD></DL></TD></TR></TBODY></TABLE><A class=anchor 
name=a3 doxytag="lti::orientedHLTransform::getTypeName"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>virtual const char* 
            lti::orientedHLTransform::getTypeName </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap>const<CODE> 
    [virtual]</CODE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>returns the name of this type ("orientedHLTransform") 
      <P>
      <P>Reimplemented from <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1transform.html#a4">lti::transform</A>. 
      </P></TD></TR></TBODY></TABLE><A class=anchor name=a9 
doxytag="lti::orientedHLTransform::operator="></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap><A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A>&amp; 
            lti::orientedHLTransform::operator= </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>const <A class=el 
            href="file:///D:/Programme/ltilib/doc/html/classlti_1_1orientedHLTransform.html">orientedHLTransform</A> 
            &amp;&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap><EM>other</EM> </TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>alias for copy member 
      <P>
      <DL compact>
        <DT><B>Parameters:</B>
        <DD>
        <TABLE cellSpacing=2 cellPadding=0 border=0>
          <TBODY>
          <TR>
            <TD vAlign=top></TD>
            <TD vAlign=top><EM>other</EM>&nbsp;</TD>
            <TD>the functor to be copied </TD></TR></TBODY></TABLE></DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>a reference to this functor object </DD></DL></TD></TR></TBODY></TABLE><A 
class=anchor name=a14 doxytag="lti::orientedHLTransform::setAccuracy"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>bool 
            lti::orientedHLTransform::setAccuracy </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=md vAlign=top noWrap>int&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap><EM>iAccuracy</EM> </TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md noWrap></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>sets accuracy of Hough Line Transform and creates the appropriate sinus 
      and cosinus integer tables 
      <P>
      <DL compact>
        <DT><B>See also:</B>
        <DD>m_iAccuracy() </DD></DL>
      <DL compact>
        <DT><B>Returns:</B>
        <DD>true, if successful </DD></DL></TD></TR></TBODY></TABLE><A class=anchor 
name=a12 doxytag="lti::orientedHLTransform::updateParameters"></A>
<P>
<TABLE class=mdTable cellSpacing=0 cellPadding=2 width="100%">
  <TBODY>
  <TR>
    <TD class=mdRow>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=md vAlign=top noWrap>virtual bool 
            lti::orientedHLTransform::updateParameters </TD>
          <TD class=md vAlign=top>(&nbsp;</TD>
          <TD class=mdname1 vAlign=top noWrap></TD>
          <TD class=md vAlign=top>&nbsp;)&nbsp;</TD>
          <TD class=md 
  noWrap><CODE>[virtual]</CODE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=5 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD>&nbsp; </TD>
    <TD>
      <P>set functor's parameters. 
      <P>This member makes a copy of <EM>theParam</EM>: the functor will keep 
      its own copy of the parameters! 
      <DL compact>
        <DT><B>Returns:</B>
        <DD>true if successful, false otherwise </DD></DL>
      <P>Reimplemented from <A class=el 
      href="file:///D:/Programme/ltilib/doc/html/classlti_1_1functor.html#a5">lti::functor</A>. 
      </P></TD></TR></TBODY></TABLE>
<HR>
The documentation for this class was generated from the following file:
<UL>
  <LI><A class=el 
  href="file:///D:/Programme/ltilib/doc/html/ltiOrientedHLTransform_8h-source.html">ltiOrientedHLTransform.h</A></LI></UL>
<HR>

<ADDRESS style="align: right"><SMALL>Generated on Fri Nov 12 15:29:09 2004 for 
LTI-Lib by <A href="http://www.doxygen.org/index.html">Doxygen 
</A>1.3.9.1</SMALL></ADDRESS></BODY></HTML>
